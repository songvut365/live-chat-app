// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chat/v1/chat.proto

package chatv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "live-chat-app/app/internal/grpc/gen/chat/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "chat.v1.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceJoinChatProcedure is the fully-qualified name of the ChatService's JoinChat RPC.
	ChatServiceJoinChatProcedure = "/chat.v1.ChatService/JoinChat"
	// ChatServiceSendMessageProcedure is the fully-qualified name of the ChatService's SendMessage RPC.
	ChatServiceSendMessageProcedure = "/chat.v1.ChatService/SendMessage"
	// ChatServiceLeaveChatProcedure is the fully-qualified name of the ChatService's LeaveChat RPC.
	ChatServiceLeaveChatProcedure = "/chat.v1.ChatService/LeaveChat"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	chatServiceServiceDescriptor           = v1.File_chat_v1_chat_proto.Services().ByName("ChatService")
	chatServiceJoinChatMethodDescriptor    = chatServiceServiceDescriptor.Methods().ByName("JoinChat")
	chatServiceSendMessageMethodDescriptor = chatServiceServiceDescriptor.Methods().ByName("SendMessage")
	chatServiceLeaveChatMethodDescriptor   = chatServiceServiceDescriptor.Methods().ByName("LeaveChat")
)

// ChatServiceClient is a client for the chat.v1.ChatService service.
type ChatServiceClient interface {
	JoinChat(context.Context, *connect.Request[v1.JoinChatRequest]) (*connect.ServerStreamForClient[v1.JoinChatResponse], error)
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	LeaveChat(context.Context, *connect.Request[v1.LeaveChatRequest]) (*connect.Response[v1.LeaveChatResponse], error)
}

// NewChatServiceClient constructs a client for the chat.v1.ChatService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chatServiceClient{
		joinChat: connect.NewClient[v1.JoinChatRequest, v1.JoinChatResponse](
			httpClient,
			baseURL+ChatServiceJoinChatProcedure,
			connect.WithSchema(chatServiceJoinChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+ChatServiceSendMessageProcedure,
			connect.WithSchema(chatServiceSendMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		leaveChat: connect.NewClient[v1.LeaveChatRequest, v1.LeaveChatResponse](
			httpClient,
			baseURL+ChatServiceLeaveChatProcedure,
			connect.WithSchema(chatServiceLeaveChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	joinChat    *connect.Client[v1.JoinChatRequest, v1.JoinChatResponse]
	sendMessage *connect.Client[v1.SendMessageRequest, v1.SendMessageResponse]
	leaveChat   *connect.Client[v1.LeaveChatRequest, v1.LeaveChatResponse]
}

// JoinChat calls chat.v1.ChatService.JoinChat.
func (c *chatServiceClient) JoinChat(ctx context.Context, req *connect.Request[v1.JoinChatRequest]) (*connect.ServerStreamForClient[v1.JoinChatResponse], error) {
	return c.joinChat.CallServerStream(ctx, req)
}

// SendMessage calls chat.v1.ChatService.SendMessage.
func (c *chatServiceClient) SendMessage(ctx context.Context, req *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// LeaveChat calls chat.v1.ChatService.LeaveChat.
func (c *chatServiceClient) LeaveChat(ctx context.Context, req *connect.Request[v1.LeaveChatRequest]) (*connect.Response[v1.LeaveChatResponse], error) {
	return c.leaveChat.CallUnary(ctx, req)
}

// ChatServiceHandler is an implementation of the chat.v1.ChatService service.
type ChatServiceHandler interface {
	JoinChat(context.Context, *connect.Request[v1.JoinChatRequest], *connect.ServerStream[v1.JoinChatResponse]) error
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	LeaveChat(context.Context, *connect.Request[v1.LeaveChatRequest]) (*connect.Response[v1.LeaveChatResponse], error)
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatServiceJoinChatHandler := connect.NewServerStreamHandler(
		ChatServiceJoinChatProcedure,
		svc.JoinChat,
		connect.WithSchema(chatServiceJoinChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceSendMessageHandler := connect.NewUnaryHandler(
		ChatServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(chatServiceSendMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceLeaveChatHandler := connect.NewUnaryHandler(
		ChatServiceLeaveChatProcedure,
		svc.LeaveChat,
		connect.WithSchema(chatServiceLeaveChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/chat.v1.ChatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatServiceJoinChatProcedure:
			chatServiceJoinChatHandler.ServeHTTP(w, r)
		case ChatServiceSendMessageProcedure:
			chatServiceSendMessageHandler.ServeHTTP(w, r)
		case ChatServiceLeaveChatProcedure:
			chatServiceLeaveChatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) JoinChat(context.Context, *connect.Request[v1.JoinChatRequest], *connect.ServerStream[v1.JoinChatResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.JoinChat is not implemented"))
}

func (UnimplementedChatServiceHandler) SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.SendMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) LeaveChat(context.Context, *connect.Request[v1.LeaveChatRequest]) (*connect.Response[v1.LeaveChatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.LeaveChat is not implemented"))
}
